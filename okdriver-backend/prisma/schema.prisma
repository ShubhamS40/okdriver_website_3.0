// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum CompanyType {
  FLEET_OPERATOR
  ENTERPRISE
  UNIVERSITY
  SCHOOL
  COLLEGE
  OTHER
}

enum CompanyStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
}

enum SenderType {
  COMPANY
  DRIVER      // i.e., the person using the vehicle credentials
  CLIENT
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum BillingCycle {
  DAILY
  MONTHLY
  THREE_MONTHS
  YEARLY
  CUSTOM
}

// ---------- ADMIN ----------
model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // hashed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ---------- INDIVIDUAL DRIVER SECTION ----------
model Driver {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  email             String   @unique
  phone             String   @unique
  latitude          Float
  longitude         Float
  emergencyContact  String?  // Optional field
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  sessions          DriverSession[]
  subscriptions     DriverSubscription[]
}

// Driver Session Management
model DriverSession {
  id          String   @id @default(uuid())
  driverId    String
  token       String   @unique
  deviceInfo  String?  // Store device information
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  // Relations
  driver      Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@index([driverId, isActive])
  @@index([token])
  @@index([expiresAt])
}

// ---------- INDIVIDUAL DRIVER SUBSCRIPTION PLANS ----------
model DriverPlan {
  id             Int           @id @default(autoincrement())
  name           String
  description    String?
  price          Decimal       @db.Decimal(10,2)
  billingCycle   BillingCycle  // Daily, Monthly, 3 Months, Yearly
  durationDays   Int          // Plan duration in days
  benefits       String[]      // Array of benefits (one per line)
  features       String[]      // Array of features included
  storageLimitGB Int           // Storage allocation in GB
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Services included in the plan (drowsiness monitoring, voice assistant, etc.)
  services       DriverService[] @relation("DriverPlanServices")
  
  // Subscriptions
  subscriptions  DriverSubscription[]
}

model DriverService {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  
  plans       DriverPlan[]  @relation("DriverPlanServices")
}

model DriverSubscription {
  id         Int                @id @default(autoincrement())
  driverId   String
  planId     Int
  startAt    DateTime          @default(now())
  endAt      DateTime
  status     SubscriptionStatus @default(ACTIVE)
  paymentRef String?           // Optional payment reference
  createdAt  DateTime          @default(now())

  driver     Driver           @relation(fields: [driverId], references: [id], onDelete: Cascade)
  plan       DriverPlan       @relation(fields: [planId], references: [id])

  @@index([driverId, status])
  @@index([endAt])
}

// ---------- COMPANY SUBSCRIPTION PLANS ----------
model CompanyPlan {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  price          Decimal        @db.Decimal(10,2)
  durationDays   Int
  billingCycle   String
  keyAdvantages  String[]
  vehicleLimit   Int
  storageLimitGB Int
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Existing relations
  features       CompanyFeature[] @relation("CompanyPlanFeatures")
  services       CompanyService[] @relation("CompanyPlanServices")
  subscriptions  CompanySubscription[]

  // **NEW BACKRELATION**
  companiesUsingThisPlan Company[] @relation("CurrentPlanRelation")
}

model CompanyFeature {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  
  plans       CompanyPlan[]  @relation("CompanyPlanFeatures")
}

model CompanyService {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  serviceType String?        // e.g., "drowsiness", "voice", "sos", "tracking", etc.
  color       String?        // For UI display
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  
  plans       CompanyPlan[]  @relation("CompanyPlanServices")
}

model CompanySubscription {
  id         Int                @id @default(autoincrement())
  companyId  Int
  planId     Int
  startAt    DateTime          @default(now())
  endAt      DateTime
  status     SubscriptionStatus @default(ACTIVE)
  paymentRef String?
  createdAt  DateTime          @default(now())

  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan       CompanyPlan  @relation(fields: [planId], references: [id])

  @@index([companyId, status])
  @@index([endAt])
}

// ---------- COMPANY & FLEET OPERATIONS ----------
model Company {
  id                    Int           @id @default(autoincrement())
  name                  String
  email                 String        @unique
  password              String
  type                  CompanyType   @default(OTHER)
  status                CompanyStatus @default(ACTIVE)

  currentPlanId         Int?
  currentPlan           CompanyPlan?  @relation("CurrentPlanRelation", fields: [currentPlanId], references: [id])
  subscriptionExpiresAt DateTime?

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  vehicles              Vehicle[]
  clients               Client[]
  subscriptions         CompanySubscription[]
  grants                ClientVehicleAccess[]
  sentMessages          ChatMessage[] @relation("CompanySender")

  @@index([currentPlanId])
}

// ---------- VEHICLES (credentials live here) ----------
model Vehicle {
  id             Int           @id @default(autoincrement())
  vehicleNumber  String        @unique
  password       String        // hashed; for driver app login
  model          String?
  type           String?       // e.g., Truck, Bus, Car
  status         VehicleStatus @default(ACTIVE)
  companyId      Int

  company        Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  locations      VehicleLocation[]
  chats          ChatMessage[]
  accesses       ClientVehicleAccess[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([companyId, status])
}

// Fast time-series storage of pings
model VehicleLocation {
  id         Int      @id @default(autoincrement())
  vehicleId  Int
  lat        Decimal  @db.Decimal(10,7)
  lng        Decimal  @db.Decimal(10,7)
  speedKph   Decimal? @db.Decimal(6,2)
  headingDeg Int?
  recordedAt DateTime @default(now())

  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, recordedAt])
}

// ---------- CLIENTS & ACCESS ----------
model Client {
  id         Int      @id @default(autoincrement())
  companyId  Int      // client belongs to a company who grants access
  name       String?
  email      String   @unique
  createdAt  DateTime @default(now())

  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  accesses   ClientVehicleAccess[]
  sentMessages ChatMessage[] @relation("ClientSender")
}

model ClientVehicleAccess {
  id          Int      @id @default(autoincrement())
  companyId   Int      // redundancy: who granted (helps querying)
  clientId    Int
  vehicleId   Int
  createdAt   DateTime @default(now())

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([clientId, vehicleId])      // same client -> same vehicle only once
  @@index([companyId])
}

// ---------- CHAT (per-vehicle room) ----------
model ChatMessage {
  id              Int        @id @default(autoincrement())
  vehicleId       Int
  senderType      SenderType
  senderCompanyId Int?       // when senderType = COMPANY
  senderClientId  Int?       // when senderType = CLIENT
  message         String
  createdAt       DateTime   @default(now())

  vehicle         Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  senderCompany   Company?   @relation("CompanySender", fields: [senderCompanyId], references: [id], onDelete: SetNull)
  senderClient    Client?    @relation("ClientSender", fields: [senderClientId], references: [id], onDelete: SetNull)

  @@index([vehicleId, createdAt])
  @@index([senderCompanyId])
  @@index([senderClientId])
}

// ---------- OTP FOR AUTHENTICATION ----------
model OTP {
  id        String   @id @default(uuid())
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([phone, code])
  @@index([expiresAt])
}